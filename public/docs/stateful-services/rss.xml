<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stateful Services Overview on InfinyOn</title>
    <link>http://localhost:1315/docs/stateful-services/</link>
    <description>Recent content in Stateful Services Overview on InfinyOn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1315/docs/stateful-services/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with Stateful Services</title>
      <link>http://localhost:1315/docs/stateful-services/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/getting-started/</guid>
      <description>This guide will get you started with the InfinyOn Stateful Streaming Development Kit (SSDK), a utility that helps developers build and troubleshoot event-streaming data pipelines, and the data engineers run them in production.&#xA;Overview for preview-5 enhanced state management with support for arrow data type and access from external services adaptors to external libraries such as http for call-outs and polars for table queries. Overview for preview-6 added support to multiple sources(merge) and multiple sinks(split) in each service.</description>
    </item>
    <item>
      <title>Data Pipeline File</title>
      <link>http://localhost:1315/docs/stateful-services/data-pipeline-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/data-pipeline-file/</guid>
      <description>The data pipeline file defines the composition between services, data streams, and state objects. It describes the end-to-end application DAG, including the source and sink topics, data types, user-defined smartmodules, stateful windows, and aggregate.&#xA;Services communicate with each other via topics, hence the service composition is defined by the topics they consume and produce.&#xA;Data Pipeline Template The data pipeline file is defined in YAML and has the following top level sections:</description>
    </item>
    <item>
      <title>SSDK Command Line Interface</title>
      <link>http://localhost:1315/docs/stateful-services/ssdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/ssdk/</guid>
      <description>Stateful Services Developer Kit (ssdk) is a binary, shipped with fluvio, that helps developers build, test, and deploy stateful services. The first version works with Rust, and upcoming versions will enable Python and Javascript.&#xA;Commands&#xA;ssdk setup ssdk generate ssdk build ssdk update ssdk clean ssdk log ssdk version ssdk run &amp;raquo; show state &amp;raquo; exit Download FVM and Install SSDK Download fluvio version manager (fvm), the package manager for fluvio and ssdk:</description>
    </item>
    <item>
      <title>Operator Definitions</title>
      <link>http://localhost:1315/docs/stateful-services/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/operators/</guid>
      <description>Operators are primitive APIs that enable developers to customize their data. There are two types of operators:&#xA;Basic Operators filter map filter-map flat-map Window Operators assign-timestamp assign-key update-state flush aggregate State Operators Checkout States section for additional information.&#xA;Basic Operators Basic operators may look familiar, as they were previously defined in SmartModules. These operators perform simple operations and may be used independently or chained in composite operations.&#xA;filter The filter operator takes a record and returns a boolean value.</description>
    </item>
    <item>
      <title>States</title>
      <link>http://localhost:1315/docs/stateful-services/states/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/states/</guid>
      <description>State is a mechanism that facilitates the collection and retrieval of data generated by streams of records. With states, pipelines can build tables, compute aggregates, join datasets, perform anomaly detections, and execute any other operation that requires collections of records.&#xA;States are specified within the transforms section of a service, where each state is designated with one owner/writer but can have multiple readers.&#xA;Fluvio supports two types of states:&#xA;Simple - the value has primitive types.</description>
    </item>
    <item>
      <title>Adaptors</title>
      <link>http://localhost:1315/docs/stateful-services/adaptors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/adaptors/</guid>
      <description>Adaptors are language specific utilities and libraries that can be used in operator to simplify interaction with outside world or perform some common tasks. Following adaptors are available:&#xA;HTTP Callout The http adaptor make it easy to make HTTP requests from your operator. It is based on the reqwest library. To use the http adaptor, you need to add adaptors section with http flag in your operator definition.&#xA;Following snippet takes a sentence and translate english to spanish using external API.</description>
    </item>
    <item>
      <title>Merge</title>
      <link>http://localhost:1315/docs/stateful-services/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/merge/</guid>
      <description>Services can merge the data from multiple topics. The merge behavior is defined in the sources section of the service definition. The only requirement is that the the output of each source must be of the same type.&#xA;When merging topics with different data types, use transformations to bring them to a common schema&#xA;The following example shows how to merge data from two topics:&#xA;.. types: my-body: type: object properties: text: type: string topics: topic-1: schema: value: type: my-body converter: json topic-2: schema: value: type: string converter: raw services: my-service: sources: - id: topic-1 type: topic - id: topic-2 type: topic steps: - operator: map run: | fn to_common_schema(input: String) -&amp;gt; Result&amp;lt;MyBody, String&amp;gt; { Ok(MyBody{ text: input }) } steps: .</description>
    </item>
    <item>
      <title>Split</title>
      <link>http://localhost:1315/docs/stateful-services/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/split/</guid>
      <description>Services can split the data into multiple topics. The split behavior is defined in the sinks section of the service definition. Similar to merge, the split operation can transform the data into schemas to match a target topic.&#xA;The following example shows how to split data into two topics:&#xA;.. types: person: type: object properties: name: type: string age: type: i32 topics: topic-kid: schema: value: type: person topic-adult: schema: value: type: person services: my-service: sources: .</description>
    </item>
    <item>
      <title>Environment Variables</title>
      <link>http://localhost:1315/docs/stateful-services/environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/environment-variables/</guid>
      <description>Environment variables can be used to pass configuration information to the operators. The environment variables are defined in the operator definition and can be accessed in the operator code.&#xA;They are useful for passing configuration information such as API keys, database connection strings, and other configuration information.&#xA;Defining Environment Variables You can define environment variables in the run command similar to Docker. The -e flag is used to define environment variables.</description>
    </item>
    <item>
      <title>Example: Usage Billing</title>
      <link>http://localhost:1315/docs/stateful-services/billing-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1315/docs/stateful-services/billing-tutorial/</guid>
      <description></description>
    </item>
  </channel>
</rss>
